//@formatter:off
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040201
#define SWIGJAVA
#define SWIG_DIRECTORS

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } } while (0)

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION) || defined(DEBUG_DIRECTOR_THREAD_NAME)
#include <iostream>
#endif

#include <exception>

#if defined(SWIG_JAVA_USE_THREAD_NAME)

#if !defined(SWIG_JAVA_GET_THREAD_NAME)
namespace Swig {
  SWIGINTERN int GetThreadName(char *name, size_t len);
}

#if defined(__linux__)

#include <sys/prctl.h>
SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  (void)len;
#if defined(PR_GET_NAME)
  return prctl(PR_GET_NAME, (unsigned long)name, 0, 0, 0);
#else
  (void)name;
  return 1;
#endif
}

#elif defined(__unix__) || defined(__APPLE__)

#include <pthread.h>
SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  return pthread_getname_np(pthread_self(), name, len);
}

#else

SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  (void)len;
  (void)name;
  return 1;
}
#endif

#endif

#endif

#if defined(SWIG_JAVA_DETACH_ON_THREAD_END)
#include <pthread.h>
#endif

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(SWIG_NULLPTR), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = SWIG_NULLPTR;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, SWIG_NULLPTR) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = SWIG_NULLPTR;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

#if defined(SWIG_JAVA_DETACH_ON_THREAD_END)
    static void detach(void *jvm) {
      static_cast<JavaVM *>(jvm)->DetachCurrentThread();
    }

    static void make_detach_key() {
      pthread_key_create(&detach_key_, detach);
    }

    /* thread-local key to register a destructor */
    static pthread_key_t detach_key_;
#endif

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

#if defined(SWIG_JAVA_DETACH_ON_THREAD_END)
  pthread_key_t JObjectWrapper::detach_key_;
#endif

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(SWIG_NULLPTR), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
        JavaVMAttachArgs args;
        args.version = JNI_VERSION_1_2;
        args.group = SWIG_NULLPTR;
        args.name = SWIG_NULLPTR;
#if defined(SWIG_JAVA_USE_THREAD_NAME)
        char thread_name[64];  // MAX_TASK_COMM_LEN=16 is hard-coded in the Linux kernel and MacOS has MAXTHREADNAMESIZE=64.
        if (Swig::GetThreadName(thread_name, sizeof(thread_name)) == 0) {
          args.name = thread_name;
#if defined(DEBUG_DIRECTOR_THREAD_NAME)
          std::cout << "JNIEnvWrapper: thread name: " << thread_name << std::endl;
        } else {
          std::cout << "JNIEnvWrapper: Couldn't set Java thread name" << std::endl;
#endif
        }
#endif
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, &args);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, &args);
#endif

#if defined(SWIG_JAVA_DETACH_ON_THREAD_END)
        // At least on Android 6, detaching after every call causes a memory leak.
        // Instead, register a thread desructor and detach only when the thread ends.
        // See https://developer.android.com/training/articles/perf-jni#threads
        static pthread_once_t once = PTHREAD_ONCE_INIT;

        pthread_once(&once, JObjectWrapper::make_detach_key);
        pthread_setspecific(JObjectWrapper::detach_key_, director->swig_jvm_);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_DETACH_ON_THREAD_END) && !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    struct SwigDirectorMethod {
      const char *name;
      const char *desc;
      jmethodID methid;
      SwigDirectorMethod(JNIEnv *jenv, jclass baseclass, const char *name, const char *desc) : name(name), desc(desc) {
        methid = jenv->GetMethodID(baseclass, name, desc);
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, SWIG_NULLPTR) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

    jclass swig_new_global_ref(JNIEnv *jenv, const char *classname) {
      jclass clz = jenv->FindClass(classname);
      return clz ? (jclass)jenv->NewGlobalRef(clz) : SWIG_NULLPTR;
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) SWIG_NULLPTR), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(SWIG_NULLPTR) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, SWIG_NULLPTR);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    // Return a C string of the exception message in the jthrowable passed in the constructor
    // If no message is available, null_string is return instead
    const char *message(const char *null_string = "Could not get exception message in JavaExceptionMessage") const {
      return message_.c_str(null_string);
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = SWIG_NULLPTR;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == SWIG_NULLPTR && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : jenv_(jenv), throwable_(throwable), classname_(SWIG_NULLPTR), msg_(SWIG_NULLPTR) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(SWIG_NULLPTR);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message(SWIG_NULLPTR));
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : jenv_(SWIG_NULLPTR), throwable_(SWIG_NULLPTR), classname_(SWIG_NULLPTR), msg_(msg ? copystr(msg) : SWIG_NULLPTR) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_ ? msg_ : "Unspecified DirectorException message";
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void throwException(JNIEnv *jenv) const {
      if (jenv) {
        if (jenv == jenv_ && throwable_) {
          // Throw original exception if not already pending
          jthrowable throwable = jenv->ExceptionOccurred();
          if (throwable && jenv->IsSameObject(throwable, throwable_) == JNI_FALSE) {
            jenv->ExceptionClear();
            throwable = SWIG_NULLPTR;
          }
          if (!throwable)
            jenv->Throw(throwable_);
        } else {
          // Try and reconstruct original exception, but original stacktrace is not reconstructed
          jenv->ExceptionClear();

          jmethodID ctorMethodID = SWIG_NULLPTR;
          jclass throwableclass = SWIG_NULLPTR;
          if (classname_) {
            throwableclass = jenv->FindClass(classname_);
            if (throwableclass)
              ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
          }

          if (ctorMethodID) {
            jenv->ThrowNew(throwableclass, what());
          } else {
            SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
          }
        }
      }
    }

    // Deprecated - use throwException
    void raiseJavaException(JNIEnv *jenv) const {
      throwException(jenv);
    }

    // Create and throw the DirectorException
    static void raise(JNIEnv *jenv, jthrowable throwable) {
      throw DirectorException(jenv, throwable);
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = SWIG_NULLPTR;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    JNIEnv *jenv_;
    jthrowable throwable_;
    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  // Note side effect of clearing any pending exceptions
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}

namespace Swig {
  namespace {
    jclass jclass_anitorrentJNI = NULL;
    jmethodID director_method_ids[13];
  }
}

#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include "anitorrent.hpp"
#include "events.hpp"
#include "peer_filter.hpp"
#include "session_t.hpp"
#include "torrent_add_info_t.hpp"
#include "torrent_handle_t.hpp"
#include "torrent_info_t.hpp"



#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>


/* Check for overflow converting to Java int (always signed 32-bit) from (unsigned variable-bit) size_t */
SWIGINTERN jint SWIG_JavaIntFromSize_t(size_t size) {
  static const jint JINT_MAX = 0x7FFFFFFF;
  return (size > (size_t)JINT_MAX) ? -1 : (jint)size;
}


SWIGINTERN jint SWIG_VectorSize(size_t size) {
  jint sz = SWIG_JavaIntFromSize_t(size);
  if (sz == -1)
    throw std::out_of_range("vector size is too large to fit into a Java int");
  return sz;
}

SWIGINTERN std::vector< anilt::peer_info_t > *new_std_vector_Sl_anilt_peer_info_t_Sg___SWIG_2(jint count,anilt::peer_info_t const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< anilt::peer_info_t >(static_cast<std::vector< anilt::peer_info_t >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_anilt_peer_info_t_Sg__doCapacity(std::vector< anilt::peer_info_t > *self){
        return SWIG_VectorSize(self->capacity());
      }
SWIGINTERN void std_vector_Sl_anilt_peer_info_t_Sg__doReserve(std::vector< anilt::peer_info_t > *self,jint n){
        if (n < 0)
          throw std::out_of_range("vector reserve size must be positive");
        self->reserve(n);
      }
SWIGINTERN jint std_vector_Sl_anilt_peer_info_t_Sg__doSize(std::vector< anilt::peer_info_t > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_anilt_peer_info_t_Sg__doAdd__SWIG_0(std::vector< anilt::peer_info_t > *self,std::vector< anilt::peer_info_t >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_anilt_peer_info_t_Sg__doAdd__SWIG_1(std::vector< anilt::peer_info_t > *self,jint index,std::vector< anilt::peer_info_t >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< anilt::peer_info_t >::value_type std_vector_Sl_anilt_peer_info_t_Sg__doRemove(std::vector< anilt::peer_info_t > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          anilt::peer_info_t const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< anilt::peer_info_t >::value_type const &std_vector_Sl_anilt_peer_info_t_Sg__doGet(std::vector< anilt::peer_info_t > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< anilt::peer_info_t >::value_type std_vector_Sl_anilt_peer_info_t_Sg__doSet(std::vector< anilt::peer_info_t > *self,jint index,std::vector< anilt::peer_info_t >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          anilt::peer_info_t const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_anilt_peer_info_t_Sg__doRemoveRange(std::vector< anilt::peer_info_t > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< char > *new_std_vector_Sl_char_Sg___SWIG_2(jint count,char const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< char >(static_cast<std::vector< char >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_char_Sg__doCapacity(std::vector< char > *self){
        return SWIG_VectorSize(self->capacity());
      }
SWIGINTERN void std_vector_Sl_char_Sg__doReserve(std::vector< char > *self,jint n){
        if (n < 0)
          throw std::out_of_range("vector reserve size must be positive");
        self->reserve(n);
      }
SWIGINTERN jint std_vector_Sl_char_Sg__doSize(std::vector< char > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_char_Sg__doAdd__SWIG_0(std::vector< char > *self,std::vector< char >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_char_Sg__doAdd__SWIG_1(std::vector< char > *self,jint index,std::vector< char >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< char >::value_type std_vector_Sl_char_Sg__doRemove(std::vector< char > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          char const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< char >::value_type const &std_vector_Sl_char_Sg__doGet(std::vector< char > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< char >::value_type std_vector_Sl_char_Sg__doSet(std::vector< char > *self,jint index,std::vector< char >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          char const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_char_Sg__doRemoveRange(std::vector< char > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }

#include <stdint.h>		// Use the C99 official header


#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, long long **carr, jlongArray input);
static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, long long *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, long long *result, jsize sz);


static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long long[] support */
static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, long long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, long long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, long long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "anitorrent_wrap.h"

SwigDirector_event_listener_t::SwigDirector_event_listener_t(JNIEnv *jenv) : anilt::event_listener_t(), Swig::Director(jenv) {
}

SwigDirector_event_listener_t::~SwigDirector_event_listener_t() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_event_listener_t::on_checked(anilt::handle_id_t handle_id) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jhandle_id  ;
  
  if (!swig_override[0]) {
    anilt::event_listener_t::on_checked(handle_id);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jhandle_id = (jlong) handle_id;
    jenv->CallStaticVoidMethod(Swig::jclass_anitorrentJNI, Swig::director_method_ids[0], swigjobj, jhandle_id);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in anilt::event_listener_t::on_checked ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_event_listener_t::on_metadata_received(anilt::handle_id_t handle_id) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jhandle_id  ;
  
  if (!swig_override[1]) {
    anilt::event_listener_t::on_metadata_received(handle_id);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jhandle_id = (jlong) handle_id;
    jenv->CallStaticVoidMethod(Swig::jclass_anitorrentJNI, Swig::director_method_ids[1], swigjobj, jhandle_id);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in anilt::event_listener_t::on_metadata_received ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_event_listener_t::on_torrent_added(anilt::handle_id_t handle_id) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jhandle_id  ;
  
  if (!swig_override[2]) {
    anilt::event_listener_t::on_torrent_added(handle_id);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jhandle_id = (jlong) handle_id;
    jenv->CallStaticVoidMethod(Swig::jclass_anitorrentJNI, Swig::director_method_ids[2], swigjobj, jhandle_id);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in anilt::event_listener_t::on_torrent_added ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_event_listener_t::on_save_resume_data(anilt::handle_id_t handle_id,anilt::torrent_resume_data_t &data) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jhandle_id  ;
  jlong jdata = 0 ;
  
  if (!swig_override[3]) {
    anilt::event_listener_t::on_save_resume_data(handle_id,data);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jhandle_id = (jlong) handle_id;
    *(anilt::torrent_resume_data_t **)&jdata = (anilt::torrent_resume_data_t *) &data; 
    jenv->CallStaticVoidMethod(Swig::jclass_anitorrentJNI, Swig::director_method_ids[3], swigjobj, jhandle_id, jdata);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in anilt::event_listener_t::on_save_resume_data ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_event_listener_t::on_torrent_state_changed(anilt::handle_id_t handle_id,anilt::torrent_state_t state) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jhandle_id  ;
  jint jstate  ;
  
  if (!swig_override[4]) {
    anilt::event_listener_t::on_torrent_state_changed(handle_id,state);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jhandle_id = (jlong) handle_id;
    jstate = (jint) state;
    jenv->CallStaticVoidMethod(Swig::jclass_anitorrentJNI, Swig::director_method_ids[4], swigjobj, jhandle_id, jstate);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in anilt::event_listener_t::on_torrent_state_changed ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_event_listener_t::on_block_downloading(anilt::handle_id_t handle_id,int32_t piece_index,int block_index) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jhandle_id  ;
  jint jpiece_index  ;
  jint jblock_index  ;
  
  if (!swig_override[5]) {
    anilt::event_listener_t::on_block_downloading(handle_id,piece_index,block_index);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jhandle_id = (jlong) handle_id;
    jpiece_index = (jint) piece_index;
    jblock_index = (jint) block_index;
    jenv->CallStaticVoidMethod(Swig::jclass_anitorrentJNI, Swig::director_method_ids[5], swigjobj, jhandle_id, jpiece_index, jblock_index);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in anilt::event_listener_t::on_block_downloading ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_event_listener_t::on_piece_finished(anilt::handle_id_t handle_id,int32_t piece_index) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jhandle_id  ;
  jint jpiece_index  ;
  
  if (!swig_override[6]) {
    anilt::event_listener_t::on_piece_finished(handle_id,piece_index);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jhandle_id = (jlong) handle_id;
    jpiece_index = (jint) piece_index;
    jenv->CallStaticVoidMethod(Swig::jclass_anitorrentJNI, Swig::director_method_ids[6], swigjobj, jhandle_id, jpiece_index);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in anilt::event_listener_t::on_piece_finished ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_event_listener_t::on_status_update(anilt::handle_id_t handle_id,anilt::torrent_stats_t &stats) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jhandle_id  ;
  jlong jstats = 0 ;
  
  if (!swig_override[7]) {
    anilt::event_listener_t::on_status_update(handle_id,stats);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jhandle_id = (jlong) handle_id;
    *(anilt::torrent_stats_t **)&jstats = (anilt::torrent_stats_t *) &stats; 
    jenv->CallStaticVoidMethod(Swig::jclass_anitorrentJNI, Swig::director_method_ids[7], swigjobj, jhandle_id, jstats);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in anilt::event_listener_t::on_status_update ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_event_listener_t::on_file_completed(anilt::handle_id_t handle_id,int file_index) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jhandle_id  ;
  jint jfile_index  ;
  
  if (!swig_override[8]) {
    anilt::event_listener_t::on_file_completed(handle_id,file_index);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jhandle_id = (jlong) handle_id;
    jfile_index = (jint) file_index;
    jenv->CallStaticVoidMethod(Swig::jclass_anitorrentJNI, Swig::director_method_ids[8], swigjobj, jhandle_id, jfile_index);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in anilt::event_listener_t::on_file_completed ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_event_listener_t::on_torrent_removed(anilt::handle_id_t handle_id,char const *torrent_name) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jhandle_id  ;
  jstring jtorrent_name = 0 ;
  
  if (!swig_override[9]) {
    anilt::event_listener_t::on_torrent_removed(handle_id,torrent_name);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jhandle_id = (jlong) handle_id;
    jtorrent_name = 0;
    if (torrent_name) {
      jtorrent_name = jenv->NewStringUTF((const char *)torrent_name);
      if (!jtorrent_name) return ;
    }
    Swig::LocalRefGuard torrent_name_refguard(jenv, jtorrent_name);
    jenv->CallStaticVoidMethod(Swig::jclass_anitorrentJNI, Swig::director_method_ids[9], swigjobj, jhandle_id, jtorrent_name);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in anilt::event_listener_t::on_torrent_removed ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_event_listener_t::on_session_stats(anilt::handle_id_t handle_id,anilt::session_stats_t &stats) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jhandle_id  ;
  jlong jstats = 0 ;
  
  if (!swig_override[10]) {
    anilt::event_listener_t::on_session_stats(handle_id,stats);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jhandle_id = (jlong) handle_id;
    *(anilt::session_stats_t **)&jstats = (anilt::session_stats_t *) &stats; 
    jenv->CallStaticVoidMethod(Swig::jclass_anitorrentJNI, Swig::director_method_ids[10], swigjobj, jhandle_id, jstats);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in anilt::event_listener_t::on_session_stats ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_event_listener_t::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "me/him188/ani/app/torrent/anitorrent/binding/event_listener_t");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "on_checked", "(J)V"),
    SwigDirectorMethod(jenv, baseclass, "on_metadata_received", "(J)V"),
    SwigDirectorMethod(jenv, baseclass, "on_torrent_added", "(J)V"),
    SwigDirectorMethod(jenv, baseclass, "on_save_resume_data", "(JLme/him188/ani/app/torrent/anitorrent/binding/torrent_resume_data_t;)V"),
    SwigDirectorMethod(jenv, baseclass, "on_torrent_state_changed", "(JLme/him188/ani/app/torrent/anitorrent/binding/torrent_state_t;)V"),
    SwigDirectorMethod(jenv, baseclass, "on_block_downloading", "(JII)V"),
    SwigDirectorMethod(jenv, baseclass, "on_piece_finished", "(JI)V"),
    SwigDirectorMethod(jenv, baseclass, "on_status_update", "(JLme/him188/ani/app/torrent/anitorrent/binding/torrent_stats_t;)V"),
    SwigDirectorMethod(jenv, baseclass, "on_file_completed", "(JI)V"),
    SwigDirectorMethod(jenv, baseclass, "on_torrent_removed", "(JLjava/lang/String;)V"),
    SwigDirectorMethod(jenv, baseclass, "on_session_stats", "(JLme/him188/ani/app/torrent/anitorrent/binding/session_stats_t;)V")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 11; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_peer_filter_t::SwigDirector_peer_filter_t(JNIEnv *jenv) : anilt::peer_filter_t(), Swig::Director(jenv) {
}

SwigDirector_peer_filter_t::~SwigDirector_peer_filter_t() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_peer_filter_t::on_filter(anilt::peer_info_t const &arg0) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0 = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method anilt::peer_filter_t::on_filter.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(anilt::peer_info_t **)&jarg0 = (anilt::peer_info_t *) &arg0; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_anitorrentJNI, Swig::director_method_ids[11], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in anilt::peer_filter_t::on_filter ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_peer_filter_t::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "me/him188/ani/app/torrent/anitorrent/binding/peer_filter_t");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "on_filter", "(Lme/him188/ani/app/torrent/anitorrent/binding/peer_info_t;)Z")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_new_event_listener_t::SwigDirector_new_event_listener_t(JNIEnv *jenv) : anilt::new_event_listener_t(), Swig::Director(jenv) {
}

SwigDirector_new_event_listener_t::~SwigDirector_new_event_listener_t() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_new_event_listener_t::on_new_events() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    anilt::new_event_listener_t::on_new_events();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_anitorrentJNI, Swig::director_method_ids[12], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in anilt::new_event_listener_t::on_new_events ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_new_event_listener_t::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "me/him188/ani/app/torrent/anitorrent/binding/new_event_listener_t");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "on_new_events", "()V")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_new_1PeerInfoList_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< anilt::peer_info_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< anilt::peer_info_t > *)new std::vector< anilt::peer_info_t >();
  *(std::vector< anilt::peer_info_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_new_1PeerInfoList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< anilt::peer_info_t > *arg1 = 0 ;
  std::vector< anilt::peer_info_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< anilt::peer_info_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< anilt::peer_info_t > const & is null");
    return 0;
  } 
  result = (std::vector< anilt::peer_info_t > *)new std::vector< anilt::peer_info_t >((std::vector< anilt::peer_info_t > const &)*arg1);
  *(std::vector< anilt::peer_info_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_PeerInfoList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< anilt::peer_info_t > *arg1 = (std::vector< anilt::peer_info_t > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< anilt::peer_info_t > **)&jarg1; 
  result = (bool)((std::vector< anilt::peer_info_t > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_PeerInfoList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< anilt::peer_info_t > *arg1 = (std::vector< anilt::peer_info_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< anilt::peer_info_t > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_new_1PeerInfoList_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  anilt::peer_info_t *arg2 = 0 ;
  std::vector< anilt::peer_info_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(anilt::peer_info_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "anilt::peer_info_t const & is null");
    return 0;
  } 
  try {
    result = (std::vector< anilt::peer_info_t > *)new_std_vector_Sl_anilt_peer_info_t_Sg___SWIG_2(SWIG_STD_MOVE(arg1),(anilt::peer_info_t const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< anilt::peer_info_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_PeerInfoList_1doCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< anilt::peer_info_t > *arg1 = (std::vector< anilt::peer_info_t > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< anilt::peer_info_t > **)&jarg1; 
  try {
    result = std_vector_Sl_anilt_peer_info_t_Sg__doCapacity(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_PeerInfoList_1doReserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< anilt::peer_info_t > *arg1 = (std::vector< anilt::peer_info_t > *) 0 ;
  jint arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< anilt::peer_info_t > **)&jarg1; 
  arg2 = jarg2; 
  try {
    std_vector_Sl_anilt_peer_info_t_Sg__doReserve(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jint JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_PeerInfoList_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< anilt::peer_info_t > *arg1 = (std::vector< anilt::peer_info_t > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< anilt::peer_info_t > **)&jarg1; 
  try {
    result = std_vector_Sl_anilt_peer_info_t_Sg__doSize((std::vector< anilt::peer_info_t > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_PeerInfoList_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< anilt::peer_info_t > *arg1 = (std::vector< anilt::peer_info_t > *) 0 ;
  std::vector< anilt::peer_info_t >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< anilt::peer_info_t > **)&jarg1; 
  arg2 = *(std::vector< anilt::peer_info_t >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< anilt::peer_info_t >::value_type const & is null");
    return ;
  } 
  std_vector_Sl_anilt_peer_info_t_Sg__doAdd__SWIG_0(arg1,(anilt::peer_info_t const &)*arg2);
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_PeerInfoList_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< anilt::peer_info_t > *arg1 = (std::vector< anilt::peer_info_t > *) 0 ;
  jint arg2 ;
  std::vector< anilt::peer_info_t >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< anilt::peer_info_t > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< anilt::peer_info_t >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< anilt::peer_info_t >::value_type const & is null");
    return ;
  } 
  try {
    std_vector_Sl_anilt_peer_info_t_Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(anilt::peer_info_t const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_PeerInfoList_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< anilt::peer_info_t > *arg1 = (std::vector< anilt::peer_info_t > *) 0 ;
  jint arg2 ;
  std::vector< anilt::peer_info_t >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< anilt::peer_info_t > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_anilt_peer_info_t_Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< anilt::peer_info_t >::value_type **)&jresult = new std::vector< anilt::peer_info_t >::value_type(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_PeerInfoList_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< anilt::peer_info_t > *arg1 = (std::vector< anilt::peer_info_t > *) 0 ;
  jint arg2 ;
  std::vector< anilt::peer_info_t >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< anilt::peer_info_t > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< anilt::peer_info_t >::value_type *) &std_vector_Sl_anilt_peer_info_t_Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< anilt::peer_info_t >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_PeerInfoList_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< anilt::peer_info_t > *arg1 = (std::vector< anilt::peer_info_t > *) 0 ;
  jint arg2 ;
  std::vector< anilt::peer_info_t >::value_type *arg3 = 0 ;
  std::vector< anilt::peer_info_t >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< anilt::peer_info_t > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< anilt::peer_info_t >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< anilt::peer_info_t >::value_type const & is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_anilt_peer_info_t_Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(anilt::peer_info_t const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< anilt::peer_info_t >::value_type **)&jresult = new std::vector< anilt::peer_info_t >::value_type(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_PeerInfoList_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< anilt::peer_info_t > *arg1 = (std::vector< anilt::peer_info_t > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< anilt::peer_info_t > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_anilt_peer_info_t_Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_delete_1PeerInfoList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< anilt::peer_info_t > *arg1 = (std::vector< anilt::peer_info_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< anilt::peer_info_t > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_new_1CharVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< char > *)new std::vector< char >();
  *(std::vector< char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_new_1CharVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< char > *arg1 = 0 ;
  std::vector< char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > const & is null");
    return 0;
  } 
  result = (std::vector< char > *)new std::vector< char >((std::vector< char > const &)*arg1);
  *(std::vector< char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_CharVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  result = (bool)((std::vector< char > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_CharVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_new_1CharVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jchar jarg2) {
  jlong jresult = 0 ;
  jint arg1 ;
  char *arg2 = 0 ;
  char temp2 ;
  std::vector< char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  temp2 = (char)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::vector< char > *)new_std_vector_Sl_char_Sg___SWIG_2(SWIG_STD_MOVE(arg1),(char const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_CharVector_1doCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  try {
    result = std_vector_Sl_char_Sg__doCapacity(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_CharVector_1doReserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  jint arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  arg2 = jarg2; 
  try {
    std_vector_Sl_char_Sg__doReserve(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jint JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_CharVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  try {
    result = std_vector_Sl_char_Sg__doSize((std::vector< char > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_CharVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::value_type *arg2 = 0 ;
  std::vector< char >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  temp2 = (std::vector< char >::value_type)jarg2; 
  arg2 = &temp2; 
  std_vector_Sl_char_Sg__doAdd__SWIG_0(arg1,(char const &)*arg2);
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_CharVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jchar jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  jint arg2 ;
  std::vector< char >::value_type *arg3 = 0 ;
  std::vector< char >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< char >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_char_Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(char const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jchar JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_CharVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jchar jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  jint arg2 ;
  std::vector< char >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< char >::value_type)std_vector_Sl_char_Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jchar JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_CharVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jchar jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  jint arg2 ;
  std::vector< char >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< char >::value_type *) &std_vector_Sl_char_Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jchar)*result; 
  return jresult;
}


SWIGEXPORT jchar JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_CharVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jchar jarg3) {
  jchar jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  jint arg2 ;
  std::vector< char >::value_type *arg3 = 0 ;
  std::vector< char >::value_type temp3 ;
  std::vector< char >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< char >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    result = (std::vector< char >::value_type)std_vector_Sl_char_Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(char const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_CharVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_char_Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_delete_1CharVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< char > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1file_1t_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  anilt::torrent_file_t *arg1 = (anilt::torrent_file_t *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_file_t **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->index = arg2;
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1file_1t_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  anilt::torrent_file_t *arg1 = (anilt::torrent_file_t *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_file_t **)&jarg1; 
  result = (unsigned int) ((arg1)->index);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1file_1t_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  anilt::torrent_file_t *arg1 = (anilt::torrent_file_t *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_file_t **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1file_1t_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  anilt::torrent_file_t *arg1 = (anilt::torrent_file_t *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_file_t **)&jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1file_1t_1path_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  anilt::torrent_file_t *arg1 = (anilt::torrent_file_t *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_file_t **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->path = *arg2;
}


SWIGEXPORT jstring JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1file_1t_1path_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  anilt::torrent_file_t *arg1 = (anilt::torrent_file_t *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_file_t **)&jarg1; 
  result = (std::string *) & ((arg1)->path);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1file_1t_1offset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  anilt::torrent_file_t *arg1 = (anilt::torrent_file_t *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_file_t **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->offset = arg2;
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1file_1t_1offset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  anilt::torrent_file_t *arg1 = (anilt::torrent_file_t *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_file_t **)&jarg1; 
  result =  ((arg1)->offset);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1file_1t_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  anilt::torrent_file_t *arg1 = (anilt::torrent_file_t *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_file_t **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1file_1t_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  anilt::torrent_file_t *arg1 = (anilt::torrent_file_t *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_file_t **)&jarg1; 
  result =  ((arg1)->size);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_new_1torrent_1file_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  anilt::torrent_file_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (anilt::torrent_file_t *)new anilt::torrent_file_t();
  *(anilt::torrent_file_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_delete_1torrent_1file_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  anilt::torrent_file_t *arg1 = (anilt::torrent_file_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(anilt::torrent_file_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_new_1torrent_1info_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  anilt::torrent_info_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (anilt::torrent_info_t *)new anilt::torrent_info_t();
  *(anilt::torrent_info_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1info_1t_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  anilt::torrent_info_t *arg1 = (anilt::torrent_info_t *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_info_t **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1info_1t_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  anilt::torrent_info_t *arg1 = (anilt::torrent_info_t *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_info_t **)&jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1info_1t_1total_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  anilt::torrent_info_t *arg1 = (anilt::torrent_info_t *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_info_t **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->total_size = arg2;
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1info_1t_1total_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  anilt::torrent_info_t *arg1 = (anilt::torrent_info_t *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_info_t **)&jarg1; 
  result = (int64_t) ((arg1)->total_size);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1info_1t_1num_1pieces_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  anilt::torrent_info_t *arg1 = (anilt::torrent_info_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_info_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_pieces = arg2;
}


SWIGEXPORT jint JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1info_1t_1num_1pieces_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  anilt::torrent_info_t *arg1 = (anilt::torrent_info_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_info_t **)&jarg1; 
  result = (int) ((arg1)->num_pieces);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1info_1t_1piece_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  anilt::torrent_info_t *arg1 = (anilt::torrent_info_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_info_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->piece_length = arg2;
}


SWIGEXPORT jint JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1info_1t_1piece_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  anilt::torrent_info_t *arg1 = (anilt::torrent_info_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_info_t **)&jarg1; 
  result = (int) ((arg1)->piece_length);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1info_1t_1last_1piece_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  anilt::torrent_info_t *arg1 = (anilt::torrent_info_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_info_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->last_piece_size = arg2;
}


SWIGEXPORT jint JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1info_1t_1last_1piece_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  anilt::torrent_info_t *arg1 = (anilt::torrent_info_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_info_t **)&jarg1; 
  result = (int) ((arg1)->last_piece_size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1info_1t_1files_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  anilt::torrent_info_t *arg1 = (anilt::torrent_info_t *) 0 ;
  std::vector< anilt::torrent_file_t > *arg2 = (std::vector< anilt::torrent_file_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_info_t **)&jarg1; 
  arg2 = *(std::vector< anilt::torrent_file_t > **)&jarg2; 
  if (arg1) (arg1)->files = *arg2;
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1info_1t_1files_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  anilt::torrent_info_t *arg1 = (anilt::torrent_info_t *) 0 ;
  std::vector< anilt::torrent_file_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_info_t **)&jarg1; 
  result = (std::vector< anilt::torrent_file_t > *)& ((arg1)->files);
  *(std::vector< anilt::torrent_file_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1info_1t_1file_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  anilt::torrent_info_t *arg1 = (anilt::torrent_info_t *) 0 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_info_t **)&jarg1; 
  result = (unsigned long)((anilt::torrent_info_t const *)arg1)->file_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1info_1t_1file_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  anilt::torrent_info_t *arg1 = (anilt::torrent_info_t *) 0 ;
  int arg2 ;
  anilt::torrent_file_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_info_t **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (anilt::torrent_file_t *)(arg1)->file_at(arg2);
  *(anilt::torrent_file_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_delete_1torrent_1info_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  anilt::torrent_info_t *arg1 = (anilt::torrent_info_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(anilt::torrent_info_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1add_1info_1t_1magnet_1uri_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  anilt::torrent_add_info_t *arg1 = (anilt::torrent_add_info_t *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_add_info_t **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->magnet_uri = *arg2;
}


SWIGEXPORT jstring JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1add_1info_1t_1magnet_1uri_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  anilt::torrent_add_info_t *arg1 = (anilt::torrent_add_info_t *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_add_info_t **)&jarg1; 
  result = (std::string *) & ((arg1)->magnet_uri);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1add_1info_1t_1torrent_1file_1path_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  anilt::torrent_add_info_t *arg1 = (anilt::torrent_add_info_t *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_add_info_t **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->torrent_file_path = *arg2;
}


SWIGEXPORT jstring JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1add_1info_1t_1torrent_1file_1path_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  anilt::torrent_add_info_t *arg1 = (anilt::torrent_add_info_t *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_add_info_t **)&jarg1; 
  result = (std::string *) & ((arg1)->torrent_file_path);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1add_1info_1t_1resume_1data_1path_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  anilt::torrent_add_info_t *arg1 = (anilt::torrent_add_info_t *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_add_info_t **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->resume_data_path = *arg2;
}


SWIGEXPORT jstring JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1add_1info_1t_1resume_1data_1path_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  anilt::torrent_add_info_t *arg1 = (anilt::torrent_add_info_t *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_add_info_t **)&jarg1; 
  result = (std::string *) & ((arg1)->resume_data_path);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1add_1info_1t_1kind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  anilt::torrent_add_info_t *arg1 = (anilt::torrent_add_info_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_add_info_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->kind = arg2;
}


SWIGEXPORT jint JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1add_1info_1t_1kind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  anilt::torrent_add_info_t *arg1 = (anilt::torrent_add_info_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_add_info_t **)&jarg1; 
  result = (int) ((arg1)->kind);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1add_1info_1t_1kKindUnset_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)anilt::torrent_add_info_t::kKindUnset;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1add_1info_1t_1kKindMagnetUri_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)anilt::torrent_add_info_t::kKindMagnetUri;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1add_1info_1t_1kKindTorrentFile_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)anilt::torrent_add_info_t::kKindTorrentFile;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_new_1torrent_1add_1info_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  anilt::torrent_add_info_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (anilt::torrent_add_info_t *)new anilt::torrent_add_info_t();
  *(anilt::torrent_add_info_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_delete_1torrent_1add_1info_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  anilt::torrent_add_info_t *arg1 = (anilt::torrent_add_info_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(anilt::torrent_add_info_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1handle_1t_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  anilt::torrent_handle_t *arg1 = (anilt::torrent_handle_t *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_handle_t **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1handle_1t_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  anilt::torrent_handle_t *arg1 = (anilt::torrent_handle_t *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_handle_t **)&jarg1; 
  result = (unsigned int) ((arg1)->id);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1handle_1t_1get_1info_1view(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  anilt::torrent_handle_t *arg1 = (anilt::torrent_handle_t *) 0 ;
  anilt::torrent_info_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_handle_t **)&jarg1; 
  result = (anilt::torrent_info_t *)((anilt::torrent_handle_t const *)arg1)->get_info_view();
  *(anilt::torrent_info_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1handle_1t_1kReloadFileSuccess_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  anilt::torrent_handle_t::reload_file_result_t result;
  
  (void)jenv;
  (void)jcls;
  result = (anilt::torrent_handle_t::reload_file_result_t)anilt::torrent_handle_t::kReloadFileSuccess;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1handle_1t_1reload_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  anilt::torrent_handle_t *arg1 = (anilt::torrent_handle_t *) 0 ;
  anilt::torrent_handle_t::reload_file_result_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_handle_t **)&jarg1; 
  result = (anilt::torrent_handle_t::reload_file_result_t)(arg1)->reload_file();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1handle_1t_1is_1valid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  anilt::torrent_handle_t *arg1 = (anilt::torrent_handle_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_handle_t **)&jarg1; 
  result = (bool)((anilt::torrent_handle_t const *)arg1)->is_valid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1handle_1t_1get_1state(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  anilt::torrent_handle_t *arg1 = (anilt::torrent_handle_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_handle_t **)&jarg1; 
  result = (int)((anilt::torrent_handle_t const *)arg1)->get_state();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1handle_1t_1post_1status_1updates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  anilt::torrent_handle_t *arg1 = (anilt::torrent_handle_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_handle_t **)&jarg1; 
  ((anilt::torrent_handle_t const *)arg1)->post_status_updates();
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1handle_1t_1post_1save_1resume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  anilt::torrent_handle_t *arg1 = (anilt::torrent_handle_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_handle_t **)&jarg1; 
  ((anilt::torrent_handle_t const *)arg1)->post_save_resume();
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1handle_1t_1post_1file_1progress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  anilt::torrent_handle_t *arg1 = (anilt::torrent_handle_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_handle_t **)&jarg1; 
  ((anilt::torrent_handle_t const *)arg1)->post_file_progress();
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1handle_1t_1set_1piece_1deadline(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  anilt::torrent_handle_t *arg1 = (anilt::torrent_handle_t *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_handle_t **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  ((anilt::torrent_handle_t const *)arg1)->set_piece_deadline(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1handle_1t_1reset_1piece_1deadline(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  anilt::torrent_handle_t *arg1 = (anilt::torrent_handle_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_handle_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  ((anilt::torrent_handle_t const *)arg1)->reset_piece_deadline(arg2);
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1handle_1t_1clear_1piece_1deadlines(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  anilt::torrent_handle_t *arg1 = (anilt::torrent_handle_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_handle_t **)&jarg1; 
  ((anilt::torrent_handle_t const *)arg1)->clear_piece_deadlines();
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1handle_1t_1set_1peer_1endgame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  anilt::torrent_handle_t *arg1 = (anilt::torrent_handle_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_handle_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  ((anilt::torrent_handle_t const *)arg1)->set_peer_endgame(arg2);
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1handle_1t_1add_1tracker(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jshort jarg3, jshort jarg4) {
  anilt::torrent_handle_t *arg1 = (anilt::torrent_handle_t *) 0 ;
  std::string *arg2 = 0 ;
  std::uint8_t arg3 = (std::uint8_t) 0 ;
  std::uint8_t arg4 = (std::uint8_t) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_handle_t **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (std::uint8_t)jarg3; 
  arg4 = (std::uint8_t)jarg4; 
  ((anilt::torrent_handle_t const *)arg1)->add_tracker((std::string const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1handle_1t_1resume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  anilt::torrent_handle_t *arg1 = (anilt::torrent_handle_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_handle_t **)&jarg1; 
  ((anilt::torrent_handle_t const *)arg1)->resume();
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1handle_1t_1ignore_1all_1files(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  anilt::torrent_handle_t *arg1 = (anilt::torrent_handle_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_handle_t **)&jarg1; 
  ((anilt::torrent_handle_t const *)arg1)->ignore_all_files();
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1handle_1t_1set_1file_1priority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  anilt::torrent_handle_t *arg1 = (anilt::torrent_handle_t *) 0 ;
  int arg2 ;
  uint8_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_handle_t **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (uint8_t)jarg3; 
  ((anilt::torrent_handle_t const *)arg1)->set_file_priority(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1handle_1t_1get_1peers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  anilt::torrent_handle_t *arg1 = (anilt::torrent_handle_t *) 0 ;
  std::vector< anilt::peer_info_t > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(anilt::torrent_handle_t **)&jarg1; 
  arg2 = *(std::vector< anilt::peer_info_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< anilt::peer_info_t > & is null");
    return ;
  } 
  ((anilt::torrent_handle_t const *)arg1)->get_peers(*arg2);
}


SWIGEXPORT jstring JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1handle_1t_1make_1magnet_1uri(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  anilt::torrent_handle_t *arg1 = (anilt::torrent_handle_t *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_handle_t **)&jarg1; 
  result = (arg1)->make_magnet_uri();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_new_1torrent_1handle_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  anilt::torrent_handle_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (anilt::torrent_handle_t *)new anilt::torrent_handle_t();
  *(anilt::torrent_handle_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_delete_1torrent_1handle_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  anilt::torrent_handle_t *arg1 = (anilt::torrent_handle_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(anilt::torrent_handle_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1stats_1t_1total_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  anilt::torrent_stats_t *arg1 = (anilt::torrent_stats_t *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_stats_t **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->total = arg2;
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1stats_1t_1total_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  anilt::torrent_stats_t *arg1 = (anilt::torrent_stats_t *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_stats_t **)&jarg1; 
  result = (int64_t) ((arg1)->total);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1stats_1t_1total_1done_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  anilt::torrent_stats_t *arg1 = (anilt::torrent_stats_t *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_stats_t **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->total_done = arg2;
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1stats_1t_1total_1done_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  anilt::torrent_stats_t *arg1 = (anilt::torrent_stats_t *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_stats_t **)&jarg1; 
  result = (int64_t) ((arg1)->total_done);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1stats_1t_1total_1upload_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  anilt::torrent_stats_t *arg1 = (anilt::torrent_stats_t *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_stats_t **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->total_upload = arg2;
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1stats_1t_1total_1upload_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  anilt::torrent_stats_t *arg1 = (anilt::torrent_stats_t *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_stats_t **)&jarg1; 
  result = (int64_t) ((arg1)->total_upload);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1stats_1t_1all_1time_1upload_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  anilt::torrent_stats_t *arg1 = (anilt::torrent_stats_t *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_stats_t **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->all_time_upload = arg2;
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1stats_1t_1all_1time_1upload_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  anilt::torrent_stats_t *arg1 = (anilt::torrent_stats_t *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_stats_t **)&jarg1; 
  result = (int64_t) ((arg1)->all_time_upload);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1stats_1t_1all_1time_1download_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  anilt::torrent_stats_t *arg1 = (anilt::torrent_stats_t *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_stats_t **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->all_time_download = arg2;
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1stats_1t_1all_1time_1download_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  anilt::torrent_stats_t *arg1 = (anilt::torrent_stats_t *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_stats_t **)&jarg1; 
  result = (int64_t) ((arg1)->all_time_download);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1stats_1t_1download_1payload_1rate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  anilt::torrent_stats_t *arg1 = (anilt::torrent_stats_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_stats_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->download_payload_rate = arg2;
}


SWIGEXPORT jint JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1stats_1t_1download_1payload_1rate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  anilt::torrent_stats_t *arg1 = (anilt::torrent_stats_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_stats_t **)&jarg1; 
  result = (int) ((arg1)->download_payload_rate);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1stats_1t_1upload_1payload_1rate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  anilt::torrent_stats_t *arg1 = (anilt::torrent_stats_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_stats_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->upload_payload_rate = arg2;
}


SWIGEXPORT jint JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1stats_1t_1upload_1payload_1rate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  anilt::torrent_stats_t *arg1 = (anilt::torrent_stats_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_stats_t **)&jarg1; 
  result = (int) ((arg1)->upload_payload_rate);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1stats_1t_1total_1payload_1download_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  anilt::torrent_stats_t *arg1 = (anilt::torrent_stats_t *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_stats_t **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->total_payload_download = arg2;
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1stats_1t_1total_1payload_1download_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  anilt::torrent_stats_t *arg1 = (anilt::torrent_stats_t *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_stats_t **)&jarg1; 
  result = (int64_t) ((arg1)->total_payload_download);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1stats_1t_1total_1payload_1upload_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  anilt::torrent_stats_t *arg1 = (anilt::torrent_stats_t *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_stats_t **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->total_payload_upload = arg2;
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1stats_1t_1total_1payload_1upload_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  anilt::torrent_stats_t *arg1 = (anilt::torrent_stats_t *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_stats_t **)&jarg1; 
  result = (int64_t) ((arg1)->total_payload_upload);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1stats_1t_1progress_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  anilt::torrent_stats_t *arg1 = (anilt::torrent_stats_t *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_stats_t **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->progress = arg2;
}


SWIGEXPORT jfloat JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1stats_1t_1progress_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  anilt::torrent_stats_t *arg1 = (anilt::torrent_stats_t *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_stats_t **)&jarg1; 
  result = (float) ((arg1)->progress);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_new_1torrent_1stats_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  anilt::torrent_stats_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (anilt::torrent_stats_t *)new anilt::torrent_stats_t();
  *(anilt::torrent_stats_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_delete_1torrent_1stats_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  anilt::torrent_stats_t *arg1 = (anilt::torrent_stats_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(anilt::torrent_stats_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1stats_1t_1download_1payload_1rate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  anilt::session_stats_t *arg1 = (anilt::session_stats_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::session_stats_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->download_payload_rate = arg2;
}


SWIGEXPORT jint JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1stats_1t_1download_1payload_1rate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  anilt::session_stats_t *arg1 = (anilt::session_stats_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::session_stats_t **)&jarg1; 
  result = (int) ((arg1)->download_payload_rate);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1stats_1t_1total_1uploaded_1bytes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  anilt::session_stats_t *arg1 = (anilt::session_stats_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::session_stats_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->total_uploaded_bytes = arg2;
}


SWIGEXPORT jint JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1stats_1t_1total_1uploaded_1bytes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  anilt::session_stats_t *arg1 = (anilt::session_stats_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::session_stats_t **)&jarg1; 
  result = (int) ((arg1)->total_uploaded_bytes);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1stats_1t_1upload_1payload_1rate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  anilt::session_stats_t *arg1 = (anilt::session_stats_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::session_stats_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->upload_payload_rate = arg2;
}


SWIGEXPORT jint JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1stats_1t_1upload_1payload_1rate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  anilt::session_stats_t *arg1 = (anilt::session_stats_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::session_stats_t **)&jarg1; 
  result = (int) ((arg1)->upload_payload_rate);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1stats_1t_1total_1downloaded_1bytes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  anilt::session_stats_t *arg1 = (anilt::session_stats_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::session_stats_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->total_downloaded_bytes = arg2;
}


SWIGEXPORT jint JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1stats_1t_1total_1downloaded_1bytes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  anilt::session_stats_t *arg1 = (anilt::session_stats_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::session_stats_t **)&jarg1; 
  result = (int) ((arg1)->total_downloaded_bytes);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_new_1session_1stats_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  anilt::session_stats_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (anilt::session_stats_t *)new anilt::session_stats_t();
  *(anilt::session_stats_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_delete_1session_1stats_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  anilt::session_stats_t *arg1 = (anilt::session_stats_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(anilt::session_stats_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_torrent_1resume_1data_1t_1save_1to_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  anilt::torrent_resume_data_t *arg1 = (anilt::torrent_resume_data_t *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::torrent_resume_data_t **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  ((anilt::torrent_resume_data_t const *)arg1)->save_to_file((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_call_1listener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  lt::alert *arg1 = (lt::alert *) 0 ;
  libtorrent::session *arg2 = 0 ;
  anilt::event_listener_t *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = *(lt::alert **)&jarg1; 
  arg2 = *(libtorrent::session **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::session & is null");
    return ;
  } 
  arg3 = *(anilt::event_listener_t **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "anilt::event_listener_t & is null");
    return ;
  } 
  using namespace anilt;
  call_listener(arg1,*arg2,*arg3);
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_new_1torrent_1resume_1data_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  anilt::torrent_resume_data_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (anilt::torrent_resume_data_t *)new anilt::torrent_resume_data_t();
  *(anilt::torrent_resume_data_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_delete_1torrent_1resume_1data_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  anilt::torrent_resume_data_t *arg1 = (anilt::torrent_resume_data_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(anilt::torrent_resume_data_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_delete_1event_1listener_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  anilt::event_listener_t *arg1 = (anilt::event_listener_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(anilt::event_listener_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_event_1listener_1t_1on_1checked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  anilt::event_listener_t *arg1 = (anilt::event_listener_t *) 0 ;
  anilt::handle_id_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::event_listener_t **)&jarg1; 
  arg2 = (anilt::handle_id_t)jarg2; 
  (arg1)->on_checked(arg2);
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_event_1listener_1t_1on_1checkedSwigExplicitevent_1listener_1t(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  anilt::event_listener_t *arg1 = (anilt::event_listener_t *) 0 ;
  anilt::handle_id_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::event_listener_t **)&jarg1; 
  arg2 = (anilt::handle_id_t)jarg2; 
  (arg1)->anilt::event_listener_t::on_checked(arg2);
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_event_1listener_1t_1on_1metadata_1received(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  anilt::event_listener_t *arg1 = (anilt::event_listener_t *) 0 ;
  anilt::handle_id_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::event_listener_t **)&jarg1; 
  arg2 = (anilt::handle_id_t)jarg2; 
  (arg1)->on_metadata_received(arg2);
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_event_1listener_1t_1on_1metadata_1receivedSwigExplicitevent_1listener_1t(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  anilt::event_listener_t *arg1 = (anilt::event_listener_t *) 0 ;
  anilt::handle_id_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::event_listener_t **)&jarg1; 
  arg2 = (anilt::handle_id_t)jarg2; 
  (arg1)->anilt::event_listener_t::on_metadata_received(arg2);
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_event_1listener_1t_1on_1torrent_1added(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  anilt::event_listener_t *arg1 = (anilt::event_listener_t *) 0 ;
  anilt::handle_id_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::event_listener_t **)&jarg1; 
  arg2 = (anilt::handle_id_t)jarg2; 
  (arg1)->on_torrent_added(arg2);
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_event_1listener_1t_1on_1torrent_1addedSwigExplicitevent_1listener_1t(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  anilt::event_listener_t *arg1 = (anilt::event_listener_t *) 0 ;
  anilt::handle_id_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::event_listener_t **)&jarg1; 
  arg2 = (anilt::handle_id_t)jarg2; 
  (arg1)->anilt::event_listener_t::on_torrent_added(arg2);
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_event_1listener_1t_1on_1save_1resume_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  anilt::event_listener_t *arg1 = (anilt::event_listener_t *) 0 ;
  anilt::handle_id_t arg2 ;
  anilt::torrent_resume_data_t *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(anilt::event_listener_t **)&jarg1; 
  arg2 = (anilt::handle_id_t)jarg2; 
  arg3 = *(anilt::torrent_resume_data_t **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "anilt::torrent_resume_data_t & is null");
    return ;
  } 
  (arg1)->on_save_resume_data(arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_event_1listener_1t_1on_1save_1resume_1dataSwigExplicitevent_1listener_1t(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  anilt::event_listener_t *arg1 = (anilt::event_listener_t *) 0 ;
  anilt::handle_id_t arg2 ;
  anilt::torrent_resume_data_t *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(anilt::event_listener_t **)&jarg1; 
  arg2 = (anilt::handle_id_t)jarg2; 
  arg3 = *(anilt::torrent_resume_data_t **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "anilt::torrent_resume_data_t & is null");
    return ;
  } 
  (arg1)->anilt::event_listener_t::on_save_resume_data(arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_event_1listener_1t_1on_1torrent_1state_1changed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  anilt::event_listener_t *arg1 = (anilt::event_listener_t *) 0 ;
  anilt::handle_id_t arg2 ;
  anilt::torrent_state_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::event_listener_t **)&jarg1; 
  arg2 = (anilt::handle_id_t)jarg2; 
  arg3 = (anilt::torrent_state_t)jarg3; 
  (arg1)->on_torrent_state_changed(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_event_1listener_1t_1on_1torrent_1state_1changedSwigExplicitevent_1listener_1t(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  anilt::event_listener_t *arg1 = (anilt::event_listener_t *) 0 ;
  anilt::handle_id_t arg2 ;
  anilt::torrent_state_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::event_listener_t **)&jarg1; 
  arg2 = (anilt::handle_id_t)jarg2; 
  arg3 = (anilt::torrent_state_t)jarg3; 
  (arg1)->anilt::event_listener_t::on_torrent_state_changed(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_event_1listener_1t_1on_1block_1downloading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4) {
  anilt::event_listener_t *arg1 = (anilt::event_listener_t *) 0 ;
  anilt::handle_id_t arg2 ;
  int32_t arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::event_listener_t **)&jarg1; 
  arg2 = (anilt::handle_id_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->on_block_downloading(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_event_1listener_1t_1on_1block_1downloadingSwigExplicitevent_1listener_1t(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4) {
  anilt::event_listener_t *arg1 = (anilt::event_listener_t *) 0 ;
  anilt::handle_id_t arg2 ;
  int32_t arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::event_listener_t **)&jarg1; 
  arg2 = (anilt::handle_id_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->anilt::event_listener_t::on_block_downloading(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_event_1listener_1t_1on_1piece_1finished(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  anilt::event_listener_t *arg1 = (anilt::event_listener_t *) 0 ;
  anilt::handle_id_t arg2 ;
  int32_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::event_listener_t **)&jarg1; 
  arg2 = (anilt::handle_id_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  (arg1)->on_piece_finished(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_event_1listener_1t_1on_1piece_1finishedSwigExplicitevent_1listener_1t(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  anilt::event_listener_t *arg1 = (anilt::event_listener_t *) 0 ;
  anilt::handle_id_t arg2 ;
  int32_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::event_listener_t **)&jarg1; 
  arg2 = (anilt::handle_id_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  (arg1)->anilt::event_listener_t::on_piece_finished(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_event_1listener_1t_1on_1status_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  anilt::event_listener_t *arg1 = (anilt::event_listener_t *) 0 ;
  anilt::handle_id_t arg2 ;
  anilt::torrent_stats_t *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(anilt::event_listener_t **)&jarg1; 
  arg2 = (anilt::handle_id_t)jarg2; 
  arg3 = *(anilt::torrent_stats_t **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "anilt::torrent_stats_t & is null");
    return ;
  } 
  (arg1)->on_status_update(arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_event_1listener_1t_1on_1status_1updateSwigExplicitevent_1listener_1t(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  anilt::event_listener_t *arg1 = (anilt::event_listener_t *) 0 ;
  anilt::handle_id_t arg2 ;
  anilt::torrent_stats_t *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(anilt::event_listener_t **)&jarg1; 
  arg2 = (anilt::handle_id_t)jarg2; 
  arg3 = *(anilt::torrent_stats_t **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "anilt::torrent_stats_t & is null");
    return ;
  } 
  (arg1)->anilt::event_listener_t::on_status_update(arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_event_1listener_1t_1on_1file_1completed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  anilt::event_listener_t *arg1 = (anilt::event_listener_t *) 0 ;
  anilt::handle_id_t arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::event_listener_t **)&jarg1; 
  arg2 = (anilt::handle_id_t)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->on_file_completed(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_event_1listener_1t_1on_1file_1completedSwigExplicitevent_1listener_1t(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  anilt::event_listener_t *arg1 = (anilt::event_listener_t *) 0 ;
  anilt::handle_id_t arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::event_listener_t **)&jarg1; 
  arg2 = (anilt::handle_id_t)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->anilt::event_listener_t::on_file_completed(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_event_1listener_1t_1on_1torrent_1removed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  anilt::event_listener_t *arg1 = (anilt::event_listener_t *) 0 ;
  anilt::handle_id_t arg2 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::event_listener_t **)&jarg1; 
  arg2 = (anilt::handle_id_t)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->on_torrent_removed(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_event_1listener_1t_1on_1torrent_1removedSwigExplicitevent_1listener_1t(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  anilt::event_listener_t *arg1 = (anilt::event_listener_t *) 0 ;
  anilt::handle_id_t arg2 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::event_listener_t **)&jarg1; 
  arg2 = (anilt::handle_id_t)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->anilt::event_listener_t::on_torrent_removed(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_event_1listener_1t_1on_1session_1stats(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  anilt::event_listener_t *arg1 = (anilt::event_listener_t *) 0 ;
  anilt::handle_id_t arg2 ;
  anilt::session_stats_t *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(anilt::event_listener_t **)&jarg1; 
  arg2 = (anilt::handle_id_t)jarg2; 
  arg3 = *(anilt::session_stats_t **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "anilt::session_stats_t & is null");
    return ;
  } 
  (arg1)->on_session_stats(arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_event_1listener_1t_1on_1session_1statsSwigExplicitevent_1listener_1t(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  anilt::event_listener_t *arg1 = (anilt::event_listener_t *) 0 ;
  anilt::handle_id_t arg2 ;
  anilt::session_stats_t *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(anilt::event_listener_t **)&jarg1; 
  arg2 = (anilt::handle_id_t)jarg2; 
  arg3 = *(anilt::session_stats_t **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "anilt::session_stats_t & is null");
    return ;
  } 
  (arg1)->anilt::event_listener_t::on_session_stats(arg2,*arg3);
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_new_1event_1listener_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  anilt::event_listener_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (anilt::event_listener_t *)new SwigDirector_event_listener_t(jenv);
  *(anilt::event_listener_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_event_1listener_1t_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  anilt::event_listener_t *obj = *((anilt::event_listener_t **)&objarg);
  (void)jcls;
  SwigDirector_event_listener_t *director = static_cast<SwigDirector_event_listener_t *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_event_1listener_1t_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  anilt::event_listener_t *obj = *((anilt::event_listener_t **)&objarg);
  SwigDirector_event_listener_t *director = dynamic_cast<SwigDirector_event_listener_t *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_peer_1info_1t_1torrent_1handle_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  anilt::peer_info_t *arg1 = (anilt::peer_info_t *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::peer_info_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->torrent_handle_id = arg2;
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_peer_1info_1t_1torrent_1handle_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  anilt::peer_info_t *arg1 = (anilt::peer_info_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::peer_info_t **)&jarg1; 
  result = (uint32_t) ((arg1)->torrent_handle_id);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_peer_1info_1t_1peer_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  anilt::peer_info_t *arg1 = (anilt::peer_info_t *) 0 ;
  std::vector< char > *arg2 = (std::vector< char > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(anilt::peer_info_t **)&jarg1; 
  arg2 = *(std::vector< char > **)&jarg2; 
  if (arg1) (arg1)->peer_id = *arg2;
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_peer_1info_1t_1peer_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  anilt::peer_info_t *arg1 = (anilt::peer_info_t *) 0 ;
  std::vector< char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::peer_info_t **)&jarg1; 
  result = (std::vector< char > *)& ((arg1)->peer_id);
  *(std::vector< char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_peer_1info_1t_1client_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  anilt::peer_info_t *arg1 = (anilt::peer_info_t *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::peer_info_t **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->client = *arg2;
}


SWIGEXPORT jstring JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_peer_1info_1t_1client_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  anilt::peer_info_t *arg1 = (anilt::peer_info_t *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::peer_info_t **)&jarg1; 
  result = (std::string *) & ((arg1)->client);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_peer_1info_1t_1ip_1addr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  anilt::peer_info_t *arg1 = (anilt::peer_info_t *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::peer_info_t **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->ip_addr = *arg2;
}


SWIGEXPORT jstring JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_peer_1info_1t_1ip_1addr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  anilt::peer_info_t *arg1 = (anilt::peer_info_t *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::peer_info_t **)&jarg1; 
  result = (std::string *) & ((arg1)->ip_addr);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_peer_1info_1t_1ip_1port_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  anilt::peer_info_t *arg1 = (anilt::peer_info_t *) 0 ;
  unsigned short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::peer_info_t **)&jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->ip_port = arg2;
}


SWIGEXPORT jint JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_peer_1info_1t_1ip_1port_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  anilt::peer_info_t *arg1 = (anilt::peer_info_t *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::peer_info_t **)&jarg1; 
  result = (unsigned short) ((arg1)->ip_port);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_peer_1info_1t_1progress_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  anilt::peer_info_t *arg1 = (anilt::peer_info_t *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::peer_info_t **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->progress = arg2;
}


SWIGEXPORT jfloat JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_peer_1info_1t_1progress_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  anilt::peer_info_t *arg1 = (anilt::peer_info_t *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::peer_info_t **)&jarg1; 
  result = (float) ((arg1)->progress);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_peer_1info_1t_1total_1download_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  anilt::peer_info_t *arg1 = (anilt::peer_info_t *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::peer_info_t **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->total_download = arg2;
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_peer_1info_1t_1total_1download_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  anilt::peer_info_t *arg1 = (anilt::peer_info_t *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::peer_info_t **)&jarg1; 
  result = (int64_t) ((arg1)->total_download);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_peer_1info_1t_1total_1upload_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  anilt::peer_info_t *arg1 = (anilt::peer_info_t *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::peer_info_t **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->total_upload = arg2;
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_peer_1info_1t_1total_1upload_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  anilt::peer_info_t *arg1 = (anilt::peer_info_t *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::peer_info_t **)&jarg1; 
  result = (int64_t) ((arg1)->total_upload);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_peer_1info_1t_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  anilt::peer_info_t *arg1 = (anilt::peer_info_t *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::peer_info_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_peer_1info_1t_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  anilt::peer_info_t *arg1 = (anilt::peer_info_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::peer_info_t **)&jarg1; 
  result = (uint32_t) ((arg1)->flags);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_new_1peer_1info_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  anilt::peer_info_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (anilt::peer_info_t *)new anilt::peer_info_t();
  *(anilt::peer_info_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_delete_1peer_1info_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  anilt::peer_info_t *arg1 = (anilt::peer_info_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(anilt::peer_info_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_delete_1peer_1filter_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  anilt::peer_filter_t *arg1 = (anilt::peer_filter_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(anilt::peer_filter_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_peer_1filter_1t_1on_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  anilt::peer_filter_t *arg1 = (anilt::peer_filter_t *) 0 ;
  anilt::peer_info_t *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(anilt::peer_filter_t **)&jarg1; 
  arg2 = *(anilt::peer_info_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "anilt::peer_info_t const & is null");
    return 0;
  } 
  result = (bool)(arg1)->on_filter((anilt::peer_info_t const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_new_1peer_1filter_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  anilt::peer_filter_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (anilt::peer_filter_t *)new SwigDirector_peer_filter_t(jenv);
  *(anilt::peer_filter_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_peer_1filter_1t_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  anilt::peer_filter_t *obj = *((anilt::peer_filter_t **)&objarg);
  (void)jcls;
  SwigDirector_peer_filter_t *director = static_cast<SwigDirector_peer_filter_t *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_peer_1filter_1t_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  anilt::peer_filter_t *obj = *((anilt::peer_filter_t **)&objarg);
  SwigDirector_peer_filter_t *director = dynamic_cast<SwigDirector_peer_filter_t *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_parse_1peer_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  lt::torrent_handle *arg1 = 0 ;
  lt::peer_info *arg2 = 0 ;
  anilt::peer_info_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lt::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "lt::torrent_handle const & is null");
    return 0;
  } 
  arg2 = *(lt::peer_info **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "lt::peer_info const & is null");
    return 0;
  } 
  result = anilt::parse_peer_info((lt::torrent_handle const &)*arg1,(lt::peer_info const &)*arg2);
  *(anilt::peer_info_t **)&jresult = new anilt::peer_info_t(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_create_1peer_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  lt::torrent_handle *arg1 = 0 ;
  std::function< bool (anilt::peer_info_t &) > *arg2 = 0 ;
  std::shared_ptr< lt::torrent_plugin > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lt::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "lt::torrent_handle const & is null");
    return 0;
  } 
  arg2 = *(std::function< bool (anilt::peer_info_t &) > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::function< bool (anilt::peer_info_t &) > const & is null");
    return 0;
  } 
  result = anilt::create_peer_filter((lt::torrent_handle const &)*arg1,(std::function< bool (anilt::peer_info_t &) > const &)*arg2);
  *(std::shared_ptr< lt::torrent_plugin > **)&jresult = new std::shared_ptr< lt::torrent_plugin >(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1settings_1t_1download_1rate_1limit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  anilt::session_settings_t *arg1 = (anilt::session_settings_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::session_settings_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->download_rate_limit = arg2;
}


SWIGEXPORT jint JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1settings_1t_1download_1rate_1limit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  anilt::session_settings_t *arg1 = (anilt::session_settings_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::session_settings_t **)&jarg1; 
  result = (int) ((arg1)->download_rate_limit);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1settings_1t_1upload_1rate_1limit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  anilt::session_settings_t *arg1 = (anilt::session_settings_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::session_settings_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->upload_rate_limit = arg2;
}


SWIGEXPORT jint JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1settings_1t_1upload_1rate_1limit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  anilt::session_settings_t *arg1 = (anilt::session_settings_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::session_settings_t **)&jarg1; 
  result = (int) ((arg1)->upload_rate_limit);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1settings_1t_1active_1seeds_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  anilt::session_settings_t *arg1 = (anilt::session_settings_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::session_settings_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->active_seeds = arg2;
}


SWIGEXPORT jint JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1settings_1t_1active_1seeds_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  anilt::session_settings_t *arg1 = (anilt::session_settings_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::session_settings_t **)&jarg1; 
  result = (int) ((arg1)->active_seeds);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1settings_1t_1active_1downloads_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  anilt::session_settings_t *arg1 = (anilt::session_settings_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::session_settings_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->active_downloads = arg2;
}


SWIGEXPORT jint JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1settings_1t_1active_1downloads_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  anilt::session_settings_t *arg1 = (anilt::session_settings_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::session_settings_t **)&jarg1; 
  result = (int) ((arg1)->active_downloads);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1settings_1t_1user_1agent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  anilt::session_settings_t *arg1 = (anilt::session_settings_t *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::session_settings_t **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->user_agent = *arg2;
}


SWIGEXPORT jstring JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1settings_1t_1user_1agent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  anilt::session_settings_t *arg1 = (anilt::session_settings_t *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::session_settings_t **)&jarg1; 
  result = (std::string *) & ((arg1)->user_agent);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1settings_1t_1peer_1fingerprint_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  anilt::session_settings_t *arg1 = (anilt::session_settings_t *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::session_settings_t **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->peer_fingerprint = *arg2;
}


SWIGEXPORT jstring JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1settings_1t_1peer_1fingerprint_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  anilt::session_settings_t *arg1 = (anilt::session_settings_t *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::session_settings_t **)&jarg1; 
  result = (std::string *) & ((arg1)->peer_fingerprint);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1settings_1t_1dht_1bootstrap_1nodes_1extra_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  anilt::session_settings_t *arg1 = (anilt::session_settings_t *) 0 ;
  std::set< std::string > *arg2 = (std::set< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::session_settings_t **)&jarg1; 
  arg2 = *(std::set< std::string > **)&jarg2; 
  if (arg1) (arg1)->dht_bootstrap_nodes_extra = *arg2;
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1settings_1t_1dht_1bootstrap_1nodes_1extra_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  anilt::session_settings_t *arg1 = (anilt::session_settings_t *) 0 ;
  std::set< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::session_settings_t **)&jarg1; 
  result = (std::set< std::string > *)& ((arg1)->dht_bootstrap_nodes_extra);
  *(std::set< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1settings_1t_1dht_1bootstrap_1nodes_1extra_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  anilt::session_settings_t *arg1 = (anilt::session_settings_t *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::session_settings_t **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->dht_bootstrap_nodes_extra_add((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1settings_1t_1trackers_1extra_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  anilt::session_settings_t *arg1 = (anilt::session_settings_t *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::session_settings_t **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->trackers_extra = *arg2;
}


SWIGEXPORT jstring JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1settings_1t_1trackers_1extra_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  anilt::session_settings_t *arg1 = (anilt::session_settings_t *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::session_settings_t **)&jarg1; 
  result = (std::string *) & ((arg1)->trackers_extra);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1settings_1t_1connections_1limit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  anilt::session_settings_t *arg1 = (anilt::session_settings_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::session_settings_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->connections_limit = arg2;
}


SWIGEXPORT jint JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1settings_1t_1connections_1limit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  anilt::session_settings_t *arg1 = (anilt::session_settings_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::session_settings_t **)&jarg1; 
  result = (int) ((arg1)->connections_limit);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1settings_1t_1max_1peerlist_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  anilt::session_settings_t *arg1 = (anilt::session_settings_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::session_settings_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->max_peerlist_size = arg2;
}


SWIGEXPORT jint JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1settings_1t_1max_1peerlist_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  anilt::session_settings_t *arg1 = (anilt::session_settings_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::session_settings_t **)&jarg1; 
  result = (int) ((arg1)->max_peerlist_size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1settings_1t_1share_1ratio_1limit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  anilt::session_settings_t *arg1 = (anilt::session_settings_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::session_settings_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->share_ratio_limit = arg2;
}


SWIGEXPORT jint JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1settings_1t_1share_1ratio_1limit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  anilt::session_settings_t *arg1 = (anilt::session_settings_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::session_settings_t **)&jarg1; 
  result = (int) ((arg1)->share_ratio_limit);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1settings_1t_1handshake_1client_1version_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  anilt::session_settings_t *arg1 = (anilt::session_settings_t *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::session_settings_t **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->handshake_client_version = *arg2;
}


SWIGEXPORT jstring JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1settings_1t_1handshake_1client_1version_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  anilt::session_settings_t *arg1 = (anilt::session_settings_t *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::session_settings_t **)&jarg1; 
  result = (std::string *) & ((arg1)->handshake_client_version);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_new_1session_1settings_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  anilt::session_settings_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (anilt::session_settings_t *)new anilt::session_settings_t();
  *(anilt::session_settings_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_delete_1session_1settings_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  anilt::session_settings_t *arg1 = (anilt::session_settings_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(anilt::session_settings_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_delete_1new_1event_1listener_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  anilt::new_event_listener_t *arg1 = (anilt::new_event_listener_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(anilt::new_event_listener_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_new_1event_1listener_1t_1on_1new_1events(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  anilt::new_event_listener_t *arg1 = (anilt::new_event_listener_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::new_event_listener_t **)&jarg1; 
  (arg1)->on_new_events();
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_new_1event_1listener_1t_1on_1new_1eventsSwigExplicitnew_1event_1listener_1t(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  anilt::new_event_listener_t *arg1 = (anilt::new_event_listener_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::new_event_listener_t **)&jarg1; 
  (arg1)->anilt::new_event_listener_t::on_new_events();
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_new_1new_1event_1listener_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  anilt::new_event_listener_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (anilt::new_event_listener_t *)new SwigDirector_new_event_listener_t(jenv);
  *(anilt::new_event_listener_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_new_1event_1listener_1t_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  anilt::new_event_listener_t *obj = *((anilt::new_event_listener_t **)&objarg);
  (void)jcls;
  SwigDirector_new_event_listener_t *director = static_cast<SwigDirector_new_event_listener_t *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_new_1event_1listener_1t_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  anilt::new_event_listener_t *obj = *((anilt::new_event_listener_t **)&objarg);
  SwigDirector_new_event_listener_t *director = dynamic_cast<SwigDirector_new_event_listener_t *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1t_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  anilt::session_t *arg1 = (anilt::session_t *) 0 ;
  anilt::session_settings_t *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(anilt::session_t **)&jarg1; 
  arg2 = *(anilt::session_settings_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "anilt::session_settings_t const & is null");
    return ;
  } 
  (arg1)->start((anilt::session_settings_t const &)*arg2);
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1t_1apply_1settings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  anilt::session_t *arg1 = (anilt::session_t *) 0 ;
  anilt::session_settings_t *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(anilt::session_t **)&jarg1; 
  arg2 = *(anilt::session_settings_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "anilt::session_settings_t const & is null");
    return ;
  } 
  (arg1)->apply_settings((anilt::session_settings_t const &)*arg2);
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1t_1resume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  anilt::session_t *arg1 = (anilt::session_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::session_t **)&jarg1; 
  ((anilt::session_t const *)arg1)->resume();
}


SWIGEXPORT jboolean JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1t_1start_1download(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jboolean jresult = 0 ;
  anilt::session_t *arg1 = (anilt::session_t *) 0 ;
  anilt::torrent_handle_t *arg2 = 0 ;
  anilt::torrent_add_info_t *arg3 = 0 ;
  std::string arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(anilt::session_t **)&jarg1; 
  arg2 = *(anilt::torrent_handle_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "anilt::torrent_handle_t & is null");
    return 0;
  } 
  arg3 = *(anilt::torrent_add_info_t **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "anilt::torrent_add_info_t const & is null");
    return 0;
  } 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (bool)((anilt::session_t const *)arg1)->start_download(*arg2,(anilt::torrent_add_info_t const &)*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1t_1release_1handle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  anilt::session_t *arg1 = (anilt::session_t *) 0 ;
  anilt::torrent_handle_t *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(anilt::session_t **)&jarg1; 
  arg2 = *(anilt::torrent_handle_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "anilt::torrent_handle_t const & is null");
    return ;
  } 
  ((anilt::session_t const *)arg1)->release_handle((anilt::torrent_handle_t const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1t_1set_1new_1event_1listener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  anilt::session_t *arg1 = (anilt::session_t *) 0 ;
  anilt::new_event_listener_t *arg2 = (anilt::new_event_listener_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(anilt::session_t **)&jarg1; 
  arg2 = *(anilt::new_event_listener_t **)&jarg2; 
  result = (bool)((anilt::session_t const *)arg1)->set_new_event_listener(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1t_1process_1events(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  anilt::session_t *arg1 = (anilt::session_t *) 0 ;
  anilt::event_listener_t *arg2 = (anilt::event_listener_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(anilt::session_t **)&jarg1; 
  arg2 = *(anilt::event_listener_t **)&jarg2; 
  ((anilt::session_t const *)arg1)->process_events(arg2);
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1t_1remove_1listener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  anilt::session_t *arg1 = (anilt::session_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::session_t **)&jarg1; 
  ((anilt::session_t const *)arg1)->remove_listener();
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1t_1set_1peer_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  anilt::session_t *arg1 = (anilt::session_t *) 0 ;
  anilt::peer_filter_t *arg2 = (anilt::peer_filter_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(anilt::session_t **)&jarg1; 
  arg2 = *(anilt::peer_filter_t **)&jarg2; 
  (arg1)->set_peer_filter(arg2);
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1t_1wait_1for_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  anilt::session_t *arg1 = (anilt::session_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::session_t **)&jarg1; 
  arg2 = (int)jarg2; 
  ((anilt::session_t const *)arg1)->wait_for_alert(arg2);
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_session_1t_1post_1session_1stats(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  anilt::session_t *arg1 = (anilt::session_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(anilt::session_t **)&jarg1; 
  ((anilt::session_t const *)arg1)->post_session_stats();
}


SWIGEXPORT jlong JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_new_1session_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  anilt::session_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (anilt::session_t *)new anilt::session_t();
  *(anilt::session_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_delete_1session_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  anilt::session_t *arg1 = (anilt::session_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(anilt::session_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_lt_1version(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  result = anilt::lt_version();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_install_1signal_1handlers(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  anilt::install_signal_handlers();
}


SWIGEXPORT void JNICALL Java_me_him188_ani_app_torrent_anitorrent_binding_anitorrentJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[13] = {
    {
      "SwigDirector_event_listener_t_on_checked", "(Lme/him188/ani/app/torrent/anitorrent/binding/event_listener_t;J)V" 
    },
    {
      "SwigDirector_event_listener_t_on_metadata_received", "(Lme/him188/ani/app/torrent/anitorrent/binding/event_listener_t;J)V" 
    },
    {
      "SwigDirector_event_listener_t_on_torrent_added", "(Lme/him188/ani/app/torrent/anitorrent/binding/event_listener_t;J)V" 
    },
    {
      "SwigDirector_event_listener_t_on_save_resume_data", "(Lme/him188/ani/app/torrent/anitorrent/binding/event_listener_t;JJ)V" 
    },
    {
      "SwigDirector_event_listener_t_on_torrent_state_changed", "(Lme/him188/ani/app/torrent/anitorrent/binding/event_listener_t;JI)V" 
    },
    {
      "SwigDirector_event_listener_t_on_block_downloading", "(Lme/him188/ani/app/torrent/anitorrent/binding/event_listener_t;JII)V" 
    },
    {
      "SwigDirector_event_listener_t_on_piece_finished", "(Lme/him188/ani/app/torrent/anitorrent/binding/event_listener_t;JI)V" 
    },
    {
      "SwigDirector_event_listener_t_on_status_update", "(Lme/him188/ani/app/torrent/anitorrent/binding/event_listener_t;JJ)V" 
    },
    {
      "SwigDirector_event_listener_t_on_file_completed", "(Lme/him188/ani/app/torrent/anitorrent/binding/event_listener_t;JI)V" 
    },
    {
      "SwigDirector_event_listener_t_on_torrent_removed", "(Lme/him188/ani/app/torrent/anitorrent/binding/event_listener_t;JLjava/lang/String;)V" 
    },
    {
      "SwigDirector_event_listener_t_on_session_stats", "(Lme/him188/ani/app/torrent/anitorrent/binding/event_listener_t;JJ)V" 
    },
    {
      "SwigDirector_peer_filter_t_on_filter", "(Lme/him188/ani/app/torrent/anitorrent/binding/peer_filter_t;J)Z" 
    },
    {
      "SwigDirector_new_event_listener_t_on_new_events", "(Lme/him188/ani/app/torrent/anitorrent/binding/new_event_listener_t;)V" 
    }
  };
  Swig::jclass_anitorrentJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_anitorrentJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_method_ids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_method_ids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif


//@formatter:on